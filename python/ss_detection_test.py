from backend import *
from backend import be_np as np, be_scp as scipy
from ss_detection import SS_Detection
from ss_detection_unet import SS_Detection_Unet

import_cupy=False
import_torch=True



class Params_Class(object):
    def __init__(self):
        
        self.n_fft=1024
        self.n_samples=128
        # self.shape=(self.n_fft, self.n_samples)
        self.shape=(self.n_fft,)

        self.sig_size_min=(1,1)
        self.sig_size_max=(256,256)
        self.sw_fixed_size_list=[8, 16, 32, 128]
        self.sw_sig_size_min=(1,1)
        self.sw_sig_size_max=(256,256)
        self.size_sam_mode='log'        # lin or log
        self.snr_min=0.5
        self.snr_max=100.0
        self.sw_fixed_snr_list=[2.0, 5.0, 10.0, 50.0]
        self.sw_snr_min=0.5
        self.sw_snr_max=100.0
        self.snr_sam_mode='log'        # lin or log
        self.n_sigs_min=0
        self.n_sigs_max=1
        self.n_sigs_p_dist=[0.1,0.9]
        # self.n_sigs_p_dist=None
        self.sw_n_sigs_min=1
        self.sw_n_sigs_max=1
        self.sw_n_sigs_p_dist=None
        # self.sw_n_sigs_p_dist=[0.1,0.9]
        
        self.sweep_snr=['ml']     # nn and ml
        self.sweep_size=['ml']    # nn and ml
        self.n_simulations=100
        self.sweep_steps=20
        self.n_adj_search=1
        self.n_largest=3

        self.n_dataset=200000
        self.generate_dataset=True
        self.remove_dataset=True
        self.mask_mode='binary'        # binary or snr or channels
        self.norm_mode_data='std'        # max or std or max&std or none
        self.norm_mode_mask='none'        # max or std or max&std or none
        self.norm_mode_bbox='len'        # max or std or max&std or none or len

        self.train=False
        self.test=True
        self.n_epochs_tot=50
        self.n_epochs_seg=50
        self.lr=1e-2
        self.load_model_params=['model']        # List of model parameters to load, seg and model
        self.save_model=True
        self.model_name='ThjNRm_weights_50.pth'
        self.model_seg_name='ThjNRm_weights_50.pth'
        self.problem_mode='segmentation'     # segmentation or detection
        self.seg_mode='unet'     # unet or threshold
        self.det_mode='contours'     # nn_segnet or nn_features or contours (nn_features is with feature extraction using LLRs and a NN afterward)
        self.train_mode='end2end'     # end2end or separate
        self.obj_det_loss_mode='mse'    # iou or mse
        self.lambda_start=100.0
        self.lambda_length=20.0
        self.lambda_obj=1.0
        self.lambda_class=1.0
        self.contours_min_area=1
        self.contours_max_gap=20
        self.verbose_level=5
        self.plot_level=5

        # Constant parameters
        self.n_epochs_dethead=self.n_epochs_tot-self.n_epochs_seg
        self.draw_histogram=False
        self.mask_thr=0.0
        self.gt_mask_thr=0.5
        self.apply_pos_weight=False
        self.noise_power=1.0
        self.ML_thr_coeff=1.9
        self.ML_thr=self.ML_thr_coeff*10.0*self.noise_power
        self.ML_PFA=1e-6
        self.ML_thr_mode='static'    # analysis or data or static
        self.eval_smooth=1e-6
        self.train_ratio=0.8
        self.val_ratio=0.0
        self.test_ratio=0.2
        self.seed=50
        self.batch_size=64
        self.n_layers=int(np.log2(min(self.shape)).round())
        self.sched_gamma=0.1
        self.sched_step_size=10
        self.nepoch_save=10
        self.nbatch_log=400
        self.hist_thr=10.0
        self.hist_bins=40
        self.test_n_dataset=10000
        self.random_str=None
        self.use_cupy=False
        self.use_torch=True
        self.ML_mode='torch'       # np or torch
        self.model_save_dir='./model/'
        self.model_load_dir='./model/backup/'
        self.figs_dir='./figs/'
        self.logs_dir='./logs/'
        self.data_dir='./data/'
        self.dataset_name='psd_dataset.npz'




        self.snr_range = np.array([self.snr_min, self.snr_max]).astype(float)
        
        self.sw_snrs = np.logspace(np.log10(self.sw_snr_min), np.log10(self.sw_snr_max), self.sweep_steps)
        seen = set()
        self.sw_snrs = [x for x in self.sw_snrs if not (x in seen or seen.add(x))]
        self.sw_snrs = np.array(self.sw_snrs).astype(float)

        sw_sizes_vals = [np.logspace(np.log10(self.sw_sig_size_min[i]), np.log10(self.sw_sig_size_max[i]), self.sweep_steps).astype(int) for i in range(len(self.shape))]
        self.sw_sizes = [tuple(x) for x in zip(*sw_sizes_vals)]
        seen = set()
        self.sw_sizes = [x for x in self.sw_sizes if not (x in seen or seen.add(x))]

        self.n_sigs_p_dist = np.array(self.n_sigs_p_dist) if self.n_sigs_p_dist is not None else self.n_sigs_p_dist
        self.sw_n_sigs_p_dist = np.array(self.sw_n_sigs_p_dist) if self.sw_n_sigs_p_dist is not None else self.sw_n_sigs_p_dist

        self.import_cupy=import_cupy
        self.import_torch=import_torch

        for path in [self.model_save_dir, self.model_load_dir, self.data_dir, self.figs_dir, self.logs_dir]:
            if not os.path.exists(path):
                os.makedirs(path)



if __name__ == '__main__':

    params = Params_Class()
    ss_det = SS_Detection(params)
    params.random_str = ss_det.gen_random_str()
    ss_det.print_info(params)
    ss_det.plot_MD_vs_SNR()
    ss_det.plot_MD_vs_DoF(mode=1)
    ss_det.plot_MD_vs_DoF(mode=2)
    if params.generate_dataset:
        if params.train:
            ss_det.generate_psd_dataset(dataset_path=params.data_dir+params.dataset_name, n_dataset=params.n_dataset, shape=params.shape, n_sigs_min=params.n_sigs_min, n_sigs_max=params.n_sigs_max, n_sigs_p_dist=params.n_sigs_p_dist, sig_size_min=params.sig_size_min, sig_size_max=params.sig_size_max, snr_range=params.snr_range, mask_mode=params.mask_mode)
        elif params.test:
            ss_det.generate_psd_dataset(dataset_path=params.data_dir+params.dataset_name, n_dataset=params.test_n_dataset, shape=params.shape, n_sigs_min=params.n_sigs_min, n_sigs_max=params.n_sigs_max, n_sigs_p_dist=params.n_sigs_p_dist, sig_size_min=params.sig_size_min, sig_size_max=params.sig_size_max, snr_range=params.snr_range, mask_mode=params.mask_mode)


    if params.train or params.test:
        ss_det_unet = SS_Detection_Unet(params)
        ss_det_unet.generate_data_loaders()
        ss_det_unet.generate_model()
        ss_det_unet.load_model()
        ss_det_unet.load_optimizer()
        ss_det_unet.train_model()
        ss_det_unet.test_model()

    if params.remove_dataset and os.path.exists(params.data_dir+params.dataset_name):
        os.remove(params.data_dir+params.dataset_name)


    metrics = {"det_rate": {}, "missed_rate": {}, "fa_rate": {}}
    if 'nn' in params.sweep_snr and params.test:
        det_rate = {}
        for size in params.sw_fixed_size_list:
            det_rate[size] = {}
            fixed_size = tuple([size for _ in range(len(params.shape))])
            for snr in params.sw_snrs:
                dataset_path=params.data_dir+'psd_dataset_snr-{:0.2f}'.format(snr)+'.npz'
                if params.generate_dataset:
                    ss_det.generate_psd_dataset(dataset_path=dataset_path, n_dataset=params.test_n_dataset, shape=params.shape, n_sigs_min=params.sw_n_sigs_min, n_sigs_max=params.sw_n_sigs_max, n_sigs_p_dist=params.sw_n_sigs_p_dist, sig_size_min=fixed_size, sig_size_max=fixed_size, snr_range=np.array([snr,snr]), mask_mode=params.mask_mode)
                ss_det_unet.dataset_path=dataset_path
                ss_det_unet.train_ratio=0.01
                ss_det_unet.test_ratio=0.99
                ss_det_unet.val_ratio=0.0
                ss_det_unet.generate_data_loaders()
                ss_det_unet.test_model()
                det_rate[size][snr] = ss_det_unet.test_acc
                if params.remove_dataset and os.path.exists(dataset_path):
                    os.remove(dataset_path)
        ss_det.print("NN detection rate for SNRs: {}\n".format(det_rate),thr=0)
        metrics['det_rate']['snr_NN'] = det_rate.copy()

    if 'nn' in params.sweep_size and params.test:
        det_rate = {}
        for snr in params.sw_fixed_snr_list:
            det_rate[snr] = {}
            fixed_snr_range = np.array([snr, snr]).astype(float)
            for size in params.sw_sizes:
                dataset_path=params.data_dir+'psd_dataset_size-{}'.format(str(size).replace(" ", ""))+'.npz'
                if params.generate_dataset:
                    ss_det.generate_psd_dataset(dataset_path=dataset_path, n_dataset=params.test_n_dataset, shape=params.shape, n_sigs_min=params.sw_n_sigs_min, n_sigs_max=params.sw_n_sigs_max, n_sigs_p_dist=params.sw_n_sigs_p_dist, sig_size_min=size, sig_size_max=size, snr_range=fixed_snr_range, mask_mode=params.mask_mode)
                ss_det_unet.dataset_path=dataset_path
                ss_det_unet.train_ratio=0.01
                ss_det_unet.test_ratio=0.99
                ss_det_unet.val_ratio=0.0
                ss_det_unet.generate_data_loaders()
                ss_det_unet.test_model()
                det_rate[snr][size] = ss_det_unet.test_acc
                if params.remove_dataset and os.path.exists(dataset_path):
                    os.remove(dataset_path)
        ss_det.print("NN detection rate for signal sizes: {}\n".format(det_rate),thr=0)
        metrics['det_rate']['size_NN'] = det_rate.copy()

    if 'ml' in params.sweep_snr or 'ml' in params.sweep_size:
        params.ML_thr = ss_det.find_ML_thr(thr_coeff=params.ML_thr_coeff)

    if 'ml' in params.sweep_snr:
        for metric in metrics:
            metrics[metric]['snr_ML'] = {}
            metrics[metric]['snr_ML_binary_search'] = {}
        for size in params.sw_fixed_size_list:
            fixed_size = tuple([size for _ in range(len(params.shape))])

            sweep_metrics = ss_det.sweep_snrs(snrs=params.sw_snrs, n_sigs_min=params.sw_n_sigs_min, n_sigs_max=params.sw_n_sigs_max, n_sigs_p_dist=params.sw_n_sigs_p_dist, sig_size_min=fixed_size, sig_size_max=fixed_size)
            ss_det.print("ML metrics for SNRs for size:{} : {}\n".format(size, {key:sweep_metrics[key]['ML'] for key in list(sweep_metrics.keys())}),thr=0)
            ss_det.print("ML-binary search metrics for SNRs for size:{} : {}\n".format(size, {key:sweep_metrics[key]['ML_binary_search'] for key in list(sweep_metrics.keys())}),thr=0)
            for metric in metrics:
                metrics[metric]['snr_ML'][size] = sweep_metrics[metric]['ML'].copy()
                metrics[metric]['snr_ML_binary_search'][size] = sweep_metrics[metric]['ML_binary_search'].copy()

    if 'ml' in params.sweep_size:
        for metric in metrics:
            metrics[metric]['size_ML'] = {}
            metrics[metric]['size_ML_binary_search'] = {}
        for snr in params.sw_fixed_snr_list:
            fixed_snr_range = np.array([snr, snr]).astype(float)

            sweep_metrics = ss_det.sweep_sizes(sizes=params.sw_sizes, n_sigs_min=params.sw_n_sigs_min, n_sigs_max=params.sw_n_sigs_max, n_sigs_p_dist=params.sw_n_sigs_p_dist, snr_range=fixed_snr_range)
            ss_det.print("ML metrics for signal sizes for snr: {} : {}\n".format(snr, {key:sweep_metrics[key]['ML'] for key in list(sweep_metrics.keys())}),thr=0)
            ss_det.print("ML-binary search metrics for signal sizes for snr: {} : {}\n".format(snr, {key:sweep_metrics[key]['ML_binary_search'] for key in list(sweep_metrics.keys())}),thr=0)
            for metric in metrics:
                metrics[metric]['size_ML'][snr] = sweep_metrics[metric]['ML'].copy()
                metrics[metric]['size_ML_binary_search'][snr] = sweep_metrics[metric]['ML_binary_search'].copy()


    # metrics['snr_NN'] = {0.5: 0.00013185336267108132, 0.6608103647168022: 0.0015672112395619337, 0.8733406762343062: 0.013371356799185668, 1.1542251415688212: 0.07687240992168713, 1.5254478735307908: 0.24722358791431434, 2.0160635313287045: 0.4892272824520826, 2.6644713548591303: 0.685144745282865, 3.5214205755638686: 0.8048406510052658, 4.653982429719222: 0.8767833832007426, 6.150799653536695: 0.9207975303991931, 8.129024324707132: 0.9500897710658429, 10.74348705760295: 0.9673707998434445, 14.198815201729696: 0.9787792107978044, 18.765448504002958: 0.9866002537129577, 24.800805740009125: 0.9914856492413843, 32.77725897265199: 0.9949680512864293, 43.319104912270475: 0.9971241964469626, 57.25142703256576: 0.9982189919336162, 75.66467275589427: 0.9988371361053048, 100.0: 0.9989291927348432}
    # metrics['size_NN'] = {(1,): 0.005061195744653047, (2,): 0.022283786251449653, (3,): 0.05467798238992691, (4,): 0.10808066050410271, (5,): 0.1804213700771332, (7,): 0.3483198815822601, (10,): 0.562700422668457, (13,): 0.6936767197608947, (18,): 0.8032814272880554, (24,): 0.8588570240974426, (33,): 0.8996480465888977, (44,): 0.9263599509239197, (59,): 0.9473758228302002, (79,): 0.9623713345527649, (106,): 0.9731439858436585, (142,): 0.9799017094612121, (191,): 0.9832067944526672, (256,): 0.9823403435707092}
    # metrics['snr_ML'] = {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.20918055555555556, 1.1542251415688212: 0.6687270622895626, 1.5254478735307908: 0.9220299145299148, 2.0160635313287045: 0.951387939221273, 2.6644713548591303: 0.9756111111111115, 3.5214205755638686: 0.9897777777777783, 4.653982429719222: 1.0000000000000004, 6.150799653536695: 0.9977777777777783, 8.129024324707132: 0.9977777777777783, 10.74348705760295: 1.0000000000000004, 14.198815201729696: 1.0000000000000004, 18.765448504002958: 1.0000000000000004, 24.800805740009125: 1.0000000000000004, 32.77725897265199: 1.0000000000000004, 43.319104912270475: 1.0000000000000004, 57.25142703256576: 1.0000000000000004, 75.66467275589427: 1.0000000000000004, 100.0: 1.0000000000000004}
    # metrics['size_ML'] = {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0075, (5,): 0.0, (7,): 0.05830128205128205, (10,): 0.19539793539793546, (13,): 0.21997448048597426, (18,): 0.47818304223744723, (24,): 0.7435307446661368, (33,): 0.8897729185120934, (44,): 0.9282022750425882, (59,): 0.9422651951653213, (79,): 0.9559282061772282, (106,): 0.9653049450759268, (142,): 0.9750333068426427, (191,): 0.9798842378658682, (256,): 0.986466015034174}
    
    ss_det.print(metrics,thr=0)
    metrics = {'det_rate': {'snr_NN': {8: {0.5: 0.014457212196242424, 0.6608103647168022: 0.025545074646511387, 0.8733406762343062: 0.04446078038984729, 1.1542251415688212: 0.07960293182442266, 1.5254478735307908: 0.13400127339747644, 2.0160635313287045: 0.20566932645536237, 2.6644713548591303: 0.29637010376299583, 3.5214205755638686: 0.3952394506623668, 4.653982429719222: 0.4943886685755945, 6.150799653536695: 0.6048691809177399, 8.129024324707132: 0.7052075509102114, 10.74348705760295: 0.7890712745728031, 14.198815201729696: 0.8492550157731579, 18.765448504002958: 0.8966616522881292, 24.800805740009125: 0.9249112094602278, 32.77725897265199: 0.9463980632443582, 43.319104912270475: 0.9619876742362976, 57.25142703256576: 0.9197324252897693, 75.66467275589427: 0.010760074901965356, 100.0: 0.008480253437113377}, 16: {0.5: 0.024547587473305963, 0.6608103647168022: 0.04600104939553046, 0.8733406762343062: 0.08238532906097751, 1.1542251415688212: 0.143527214613653, 1.5254478735307908: 0.23206005721322953, 2.0160635313287045: 0.3412264493203932, 2.6644713548591303: 0.4559242709990471, 3.5214205755638686: 0.5721394696543294, 4.653982429719222: 0.6814975119406177, 6.150799653536695: 0.7795807680776042, 8.129024324707132: 0.8638533984461139, 10.74348705760295: 0.9177643687494339, 14.198815201729696: 0.9452030850994971, 18.765448504002958: 0.9619393444830372, 24.800805740009125: 0.9725437156615718, 32.77725897265199: 0.9799930680182672, 43.319104912270475: 0.9847971639325542, 57.25142703256576: 0.9718661215997512, 75.66467275589427: 0.08872924100968145, 100.0: 0.023618002524299006}, 32: {0.5: 0.030883421941149618, 0.6608103647168022: 0.059097418813936174, 0.8733406762343062: 0.11551341241405856, 1.1542251415688212: 0.20922798485525193, 1.5254478735307908: 0.3519416557204339, 2.0160635313287045: 0.5051550272972353, 2.6644713548591303: 0.6548538419508165, 3.5214205755638686: 0.7860780073750404, 4.653982429719222: 0.882813722472037, 6.150799653536695: 0.9374512368632901, 8.129024324707132: 0.9612213950003347, 10.74348705760295: 0.9719663769968094, 14.198815201729696: 0.9792810916900635, 18.765448504002958: 0.9848051213449047, 24.800805740009125: 0.9879555586845644, 32.77725897265199: 0.9901638334797275, 43.319104912270475: 0.9914820259617221, 57.25142703256576: 0.9915689249192515, 75.66467275589427: 0.9920771287333581, 100.0: 0.9916228129017738}, 128: {0.5: 0.02941594235599041, 0.6608103647168022: 0.05472435977670454, 0.8733406762343062: 0.11396726735176578, 1.1542251415688212: 0.24623664252219662, 1.5254478735307908: 0.4627650378211852, 2.0160635313287045: 0.6875446338807383, 2.6644713548591303: 0.8502199315255689, 3.5214205755638686: 0.9381642230095402, 4.653982429719222: 0.9710557979922141, 6.150799653536695: 0.9810546209735255, 8.129024324707132: 0.9862268747821931, 10.74348705760295: 0.9889333532702538, 14.198815201729696: 0.990698270643911, 18.765448504002958: 0.9918839004731947, 24.800805740009125: 0.992435029245192, 32.77725897265199: 0.9926659357163214, 43.319104912270475: 0.9930004135254891, 57.25142703256576: 0.9931464664397701, 75.66467275589427: 0.9930970061209894, 100.0: 0.9932943344116211}}, 'size_NN': {2.0: {(1,): 0.013056671351413284, (2,): 0.042176030924723995, (3,): 0.0690593381081858, (4,): 0.093489310674129, (5,): 0.11526783839348824, (7,): 0.17235703559652452, (10,): 0.25953385541515966, (13,): 0.304303712614121, (18,): 0.3618328131014301, (24,): 0.42286427251754266, (33,): 0.5080121028807856, (44,): 0.5773125769630555, (59,): 0.629574691480206, (79,): 0.6580815372928497, (106,): 0.6783340292592203, (142,): 0.674623635507399, (191,): 0.6240330088523126, (256,): 0.49040963842022806}, 5.0: {(1,): 0.05423665204115452, (2,): 0.1485780077115182, (3,): 0.23776179542464596, (4,): 0.3083410858146606, (5,): 0.3726942377705728, (7,): 0.4802369838760745, (10,): 0.592014261984056, (13,): 0.654627279696926, (18,): 0.7354599183605564, (24,): 0.8255645340488803, (33,): 0.9079785604630747, (44,): 0.9441356535880796, (59,): 0.961920775521186, (79,): 0.9698192515680867, (106,): 0.9730471288004229, (142,): 0.974265411976845, (191,): 0.9667681736330832, (256,): 0.9288086448946307}, 10.0: {(1,): 0.11976536555636313, (2,): 0.29501733356906523, (3,): 0.448607470527772, (4,): 0.5534017926262271, (5,): 0.6355271377871113, (7,): 0.7350187901527651, (10,): 0.8180223541875039, (13,): 0.8691708007166462, (18,): 0.9254424052853738, (24,): 0.9536371554097821, (33,): 0.9703755336423074, (44,): 0.9790813622936125, (59,): 0.9846001398178839, (79,): 0.9876292605553904, (106,): 0.9886277187255121, (142,): 0.9879355892058341, (191,): 0.9847294445960753, (256,): 0.9701353134647492}, 50.0: {(1,): 0.5448210143273876, (2,): 0.8170816956027862, (3,): 0.8892199520141848, (4,): 0.922911504391701, (5,): 0.9412343182871419, (7,): 0.9623057219289964, (10,): 0.9767154724367203, (13,): 0.9829564421407638, (18,): 0.9872359618063896, (24,): 0.9895008956232378, (33,): 0.9916697048371838, (44,): 0.9926079657769973, (59,): 0.9934644114586615, (79,): 0.9937193570598479, (106,): 0.9934898857147463, (142,): 0.9925098830653775, (191,): 0.9899209007140128, (256,): 0.9811430281208408}}, 'snr_ML': {8: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.01, 2.6644713548591303: 0.06909477124183007, 3.5214205755638686: 0.2801375062845651, 4.653982429719222: 0.4901489898989898, 6.150799653536695: 0.7398174325674325, 8.129024324707132: 0.8615114300903773, 10.74348705760295: 0.9169419191919193, 14.198815201729696: 0.9393169934640524, 18.765448504002958: 0.9591487956487955, 24.800805740009125: 0.9633888888888891, 32.77725897265199: 0.9789166666666667, 43.319104912270475: 0.9795833333333335, 57.25142703256576: 0.9809166666666667, 75.66467275589427: 0.9951388888888889, 100.0: 0.9804166666666666}, 16: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.00875, 1.5254478735307908: 0.045037284144427, 2.0160635313287045: 0.13866653245561913, 2.6644713548591303: 0.542698938634465, 3.5214205755638686: 0.8216465604548455, 4.653982429719222: 0.910556734502168, 6.150799653536695: 0.9349070537063032, 8.129024324707132: 0.9524389773453241, 10.74348705760295: 0.9657049486461253, 14.198815201729696: 0.9680285947712419, 18.765448504002958: 0.972107843137255, 24.800805740009125: 0.9798548761609907, 32.77725897265199: 0.9846977124183007, 43.319104912270475: 0.9861968954248366, 57.25142703256576: 0.9891053921568629, 75.66467275589427: 0.9925, 100.0: 0.9938888888888888}, 32: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.005079365079365079, 1.1542251415688212: 0.15402534817462987, 1.5254478735307908: 0.4388624127002015, 2.0160635313287045: 0.8091466847504417, 2.6644713548591303: 0.9173081611281445, 3.5214205755638686: 0.9480575609031492, 4.653982429719222: 0.9636499417097327, 6.150799653536695: 0.9666652590807003, 8.129024324707132: 0.9730049656226126, 10.74348705760295: 0.9830271464646464, 14.198815201729696: 0.9872905525846701, 18.765448504002958: 0.9885594919786095, 24.800805740009125: 0.9889544340463458, 32.77725897265199: 0.9907102272727272, 43.319104912270475: 0.9906818181818181, 57.25142703256576: 0.9941365864527628, 75.66467275589427: 0.996608734402852, 100.0: 0.9981439393939394}, 128: {0.5: 0.1431545541067969, 0.6608103647168022: 0.5948360896498482, 0.8733406762343062: 0.9308899363708608, 1.1542251415688212: 0.9415107061517045, 1.5254478735307908: 0.9616242451675028, 2.0160635313287045: 0.9715065960303721, 2.6644713548591303: 0.9798467839199209, 3.5214205755638686: 0.9862245690125855, 4.653982429719222: 0.9896441730077674, 6.150799653536695: 0.9913701224837319, 8.129024324707132: 0.9954963029787833, 10.74348705760295: 0.9961827388938582, 14.198815201729696: 0.9957957016687378, 18.765448504002958: 0.9958869201292893, 24.800805740009125: 0.9971166424418605, 32.77725897265199: 0.9974391804900526, 43.319104912270475: 0.9984482993133412, 57.25142703256576: 0.9988287306201551, 75.66467275589427: 0.9989879900864639, 100.0: 0.9989873844663089}}, 'snr_ML_binary_search': {8: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.03688888888888889, 3.5214205755638686: 0.12044018827690227, 4.653982429719222: 0.17756550467076782, 6.150799653536695: 0.35809962749668633, 8.129024324707132: 0.5284951571994242, 10.74348705760295: 0.6530989941242007, 14.198815201729696: 0.7616760840717555, 18.765448504002958: 0.9249442501942502, 24.800805740009125: 0.9487222222222224, 32.77725897265199: 0.9701210178710178, 43.319104912270475: 0.9795833333333335, 57.25142703256576: 0.9809166666666667, 75.66467275589427: 0.9951388888888889, 100.0: 0.9804166666666666}, 16: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.006875, 2.0160635313287045: 0.023421675545514553, 2.6644713548591303: 0.17263729528002464, 3.5214205755638686: 0.4551749378621849, 4.653982429719222: 0.6994601596573757, 6.150799653536695: 0.7901246363679588, 8.129024324707132: 0.9036634806638927, 10.74348705760295: 0.9590825230168346, 14.198815201729696: 0.9519942490992989, 18.765448504002958: 0.9687372291021671, 24.800805740009125: 0.9798548761609907, 32.77725897265199: 0.9846977124183007, 43.319104912270475: 0.9846179480564156, 57.25142703256576: 0.9891053921568629, 75.66467275589427: 0.9925, 100.0: 0.9938888888888888}, 32: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.004923076923076923, 1.1542251415688212: 0.0731405971479501, 1.5254478735307908: 0.23523467650169913, 2.0160635313287045: 0.49586138479499214, 2.6644713548591303: 0.6281593560864723, 3.5214205755638686: 0.8587412767693722, 4.653982429719222: 0.9259016095314877, 6.150799653536695: 0.9644722199658343, 8.129024324707132: 0.971506853440677, 10.74348705760295: 0.9768713924963924, 14.198815201729696: 0.9882280525846702, 18.765448504002958: 0.9877023491214668, 24.800805740009125: 0.9898919340463458, 32.77725897265199: 0.9870276875901877, 43.319104912270475: 0.9904496753246752, 57.25142703256576: 0.9941365864527628, 75.66467275589427: 0.996608734402852, 100.0: 0.9981439393939394}, 128: {0.5: 0.11024545572595444, 0.6608103647168022: 0.4688966127318306, 0.8733406762343062: 0.8512361943346032, 1.1542251415688212: 0.8990698051980721, 1.5254478735307908: 0.9492629356934814, 2.0160635313287045: 0.9627773063231804, 2.6644713548591303: 0.9778445860866491, 3.5214205755638686: 0.9851653258946746, 4.653982429719222: 0.9870393584840087, 6.150799653536695: 0.9890973465983092, 8.129024324707132: 0.9948231969607738, 10.74348705760295: 0.9961881062602703, 14.198815201729696: 0.9949135199427568, 18.765448504002958: 0.9959609427987318, 24.800805740009125: 0.9968900386544266, 32.77725897265199: 0.9977422107930829, 43.319104912270475: 0.9982944531594952, 57.25142703256576: 0.9988287306201551, 75.66467275589427: 0.9989879900864639, 100.0: 0.9987583768327211}}, 'size_ML': {2.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.03445454545454545, (13,): 0.08079494409099673, (18,): 0.36401094303611464, (24,): 0.6497453947321579, (33,): 0.8307714231195052, (44,): 0.9176139964085982, (59,): 0.9330544225375674, (79,): 0.9558134926416086, (106,): 0.9623156923199839, (142,): 0.9747299484104459, (191,): 0.9812089559166278, (256,): 0.9845299591700847}, 5.0: {(1,): 0.04, (2,): 0.08366666666666665, (3,): 0.10001785714285713, (4,): 0.16185064935064936, (5,): 0.3665833333333333, (7,): 0.5138977411477411, (10,): 0.7225033942665523, (13,): 0.8759522313198783, (18,): 0.934928259383637, (24,): 0.9493341361065498, (33,): 0.955938432457988, (44,): 0.9775972712564971, (59,): 0.9798029515443968, (79,): 0.9839226267329884, (106,): 0.9891828455242186, (142,): 0.9894578067656268, (191,): 0.9928301442534659, (256,): 0.9950182740949548}, 10.0: {(1,): 0.115, (2,): 0.2533333333333333, (3,): 0.5013333333333333, (4,): 0.6899920634920634, (5,): 0.7798690476190475, (7,): 0.8785223665223666, (10,): 0.9246317016317015, (13,): 0.9541053113553114, (18,): 0.9646924194544333, (24,): 0.9759371794871795, (33,): 0.9780898029024965, (44,): 0.9889288537549406, (59,): 0.9885988016953563, (79,): 0.9914472435670207, (106,): 0.9929645392976376, (142,): 0.9962109174081004, (191,): 0.9962962002150028, (256,): 0.9970077006553004}, 50.0: {(1,): 0.65, (2,): 0.9033333333333334, (3,): 0.91825, (4,): 0.9681666666666666, (5,): 0.9716666666666667, (7,): 0.968984126984127, (10,): 0.9805454545454546, (13,): 0.9910842490842492, (18,): 0.9945029239766083, (24,): 0.99265, (33,): 0.996096256684492, (44,): 0.9947828282828283, (59,): 0.9978133740853941, (79,): 0.9975981012658227, (106,): 0.9984949744313173, (142,): 0.9988038018319707, (191,): 0.9991628490401397, (256,): 0.9992973309824902}}, 'size_ML_binary_search': {2.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.025494505494505493, (18,): 0.13575201756562383, (24,): 0.3710603829435163, (33,): 0.5549491270509984, (44,): 0.7972588336494215, (59,): 0.892247600881949, (79,): 0.9308715679613451, (106,): 0.9551676740951812, (142,): 0.972724151433317, (191,): 0.9710406765300776, (256,): 0.983931635057416}, 5.0: {(1,): 0.0, (2,): 0.0010526315789473684, (3,): 0.026000000000000002, (4,): 0.036944444444444446, (5,): 0.10537912912912914, (7,): 0.17656715506715506, (10,): 0.3412297516719245, (13,): 0.5812616828358149, (18,): 0.7645949164176689, (24,): 0.8967543056136448, (33,): 0.9431282225853355, (44,): 0.9709795396289109, (59,): 0.9771302466573402, (79,): 0.982969165515919, (106,): 0.9871923602638375, (142,): 0.9886472017253989, (191,): 0.9918936354802774, (256,): 0.9940636052740912}, 10.0: {(1,): 0.02, (2,): 0.012857142857142855, (3,): 0.2493137254901961, (4,): 0.28206349206349207, (5,): 0.4241924741924742, (7,): 0.5643376093361971, (10,): 0.7944902515880985, (13,): 0.9054324905446065, (18,): 0.9519856525371401, (24,): 0.972570990717765, (33,): 0.9788221261348196, (44,): 0.9870470355731226, (59,): 0.9864828002373649, (79,): 0.9903447153621977, (106,): 0.9929680333577353, (142,): 0.9951642530995705, (191,): 0.9955713401228061, (256,): 0.997201366923465}, 50.0: {(1,): 0.3401523809523809, (2,): 0.7062670565302145, (3,): 0.7513204013961605, (4,): 0.9481666666666666, (5,): 0.9675128205128206, (7,): 0.9648174603174604, (10,): 0.9782377622377623, (13,): 0.9910842490842492, (18,): 0.9945029239766083, (24,): 0.99265, (33,): 0.996096256684492, (44,): 0.9947828282828283, (59,): 0.9963617611821683, (79,): 0.9975981012658227, (106,): 0.9982197450735191, (142,): 0.9985969052802466, (191,): 0.9991628490401397, (256,): 0.9991819533280502}}}, 'missed_rate': {'snr_ML': {8: {0.5: 1.0, 0.6608103647168022: 1.0, 0.8733406762343062: 1.0, 1.1542251415688212: 1.0, 1.5254478735307908: 1.0, 2.0160635313287045: 0.99, 2.6644713548591303: 0.92, 3.5214205755638686: 0.67, 4.653982429719222: 0.43, 6.150799653536695: 0.16, 8.129024324707132: 0.04, 10.74348705760295: 0.01, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 16: {0.5: 1.0, 0.6608103647168022: 1.0, 0.8733406762343062: 1.0, 1.1542251415688212: 0.99, 1.5254478735307908: 0.93, 2.0160635313287045: 0.83, 2.6644713548591303: 0.39, 3.5214205755638686: 0.08, 4.653982429719222: 0.01, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 32: {0.5: 1.0, 0.6608103647168022: 1.0, 0.8733406762343062: 0.99, 1.1542251415688212: 0.83, 1.5254478735307908: 0.48, 2.0160635313287045: 0.09, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 128: {0.5: 0.82, 0.6608103647168022: 0.32, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}}, 'snr_ML_binary_search': {8: {0.5: 1.0, 0.6608103647168022: 1.0, 0.8733406762343062: 1.0, 1.1542251415688212: 1.0, 1.5254478735307908: 1.0, 2.0160635313287045: 1.0, 2.6644713548591303: 0.96, 3.5214205755638686: 0.84, 4.653982429719222: 0.77, 6.150799653536695: 0.58, 8.129024324707132: 0.36, 10.74348705760295: 0.19, 14.198815201729696: 0.14, 18.765448504002958: 0.03, 24.800805740009125: 0.01, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 16: {0.5: 1.0, 0.6608103647168022: 1.0, 0.8733406762343062: 1.0, 1.1542251415688212: 1.0, 1.5254478735307908: 0.99, 2.0160635313287045: 0.96, 2.6644713548591303: 0.75, 3.5214205755638686: 0.42, 4.653982429719222: 0.22, 6.150799653536695: 0.11, 8.129024324707132: 0.02, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 32: {0.5: 1.0, 0.6608103647168022: 1.0, 0.8733406762343062: 0.99, 1.1542251415688212: 0.92, 1.5254478735307908: 0.71, 2.0160635313287045: 0.37, 2.6644713548591303: 0.22, 3.5214205755638686: 0.04, 4.653982429719222: 0.02, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 128: {0.5: 0.86, 0.6608103647168022: 0.43, 0.8733406762343062: 0.02, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}}, 'size_ML': {2.0: {(1,): 1.0, (2,): 1.0, (3,): 1.0, (4,): 1.0, (5,): 1.0, (7,): 1.0, (10,): 0.96, (13,): 0.9, (18,): 0.59, (24,): 0.27, (33,): 0.07, (44,): 0.01, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 5.0: {(1,): 0.96, (2,): 0.89, (3,): 0.86, (4,): 0.8, (5,): 0.59, (7,): 0.41, (10,): 0.17, (13,): 0.03, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 10.0: {(1,): 0.88, (2,): 0.72, (3,): 0.46, (4,): 0.2, (5,): 0.13, (7,): 0.04, (10,): 0.01, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 50.0: {(1,): 0.35, (2,): 0.03, (3,): 0.02, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}}, 'size_ML_binary_search': {2.0: {(1,): 1.0, (2,): 1.0, (3,): 1.0, (4,): 1.0, (5,): 1.0, (7,): 1.0, (10,): 1.0, (13,): 0.97, (18,): 0.82, (24,): 0.57, (33,): 0.32, (44,): 0.11, (59,): 0.03, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 5.0: {(1,): 1.0, (2,): 0.99, (3,): 0.97, (4,): 0.95, (5,): 0.86, (7,): 0.78, (10,): 0.55, (13,): 0.27, (18,): 0.14, (24,): 0.01, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 10.0: {(1,): 0.98, (2,): 0.98, (3,): 0.73, (4,): 0.66, (5,): 0.5, (7,): 0.33, (10,): 0.09, (13,): 0.0, (18,): 0.01, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 50.0: {(1,): 0.64, (2,): 0.22, (3,): 0.17, (4,): 0.02, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}}}, 'fa_rate': {'snr_ML': {8: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 16: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 32: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 128: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}}, 'snr_ML_binary_search': {8: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 16: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 32: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}, 128: {0.5: 0.0, 0.6608103647168022: 0.0, 0.8733406762343062: 0.0, 1.1542251415688212: 0.0, 1.5254478735307908: 0.0, 2.0160635313287045: 0.0, 2.6644713548591303: 0.0, 3.5214205755638686: 0.0, 4.653982429719222: 0.0, 6.150799653536695: 0.0, 8.129024324707132: 0.0, 10.74348705760295: 0.0, 14.198815201729696: 0.0, 18.765448504002958: 0.0, 24.800805740009125: 0.0, 32.77725897265199: 0.0, 43.319104912270475: 0.0, 57.25142703256576: 0.0, 75.66467275589427: 0.0, 100.0: 0.0}}, 'size_ML': {2.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 5.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 10.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 50.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}}, 'size_ML_binary_search': {2.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 5.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 10.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}, 50.0: {(1,): 0.0, (2,): 0.0, (3,): 0.0, (4,): 0.0, (5,): 0.0, (7,): 0.0, (10,): 0.0, (13,): 0.0, (18,): 0.0, (24,): 0.0, (33,): 0.0, (44,): 0.0, (59,): 0.0, (79,): 0.0, (106,): 0.0, (142,): 0.0, (191,): 0.0, (256,): 0.0}}}}
    if params.sweep_snr:
        ss_det.plot(plot_dic=metrics, mode='snr')
    if params.sweep_size:
        ss_det.plot(plot_dic=metrics, mode='size')



